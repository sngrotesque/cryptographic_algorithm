#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include "base64.h"
#define XOR(x, y)         ((x & 0xFF) << 7) ^ y
#define XOR_TOP(x, y, z)  (x ^ y ^ (y / 2)) ^ z

const uint32_t mainKey[256] = {
    0x477c, 0x8381, 0x1c66, 0x985f, 0x5946, 0x7574, 0xff76, 0xdb7c, 0x82bd, 0x115f, 0x99ea, 0x1b94, 0xa7cf, 0x13a3, 0xd222, 0x57cf,
    0xd7e0, 0x4207, 0xc6d2, 0x08a3, 0xf55b, 0xda38, 0xd38c, 0x6a3e, 0x6c61, 0x2ac2, 0x0cb5, 0xdf02, 0x0a0e, 0xd873, 0x1208, 0xa48f,
    0x2044, 0x0fd4, 0x93a0, 0x5ca0, 0xc0d3, 0x74e8, 0xbfe5, 0x4379, 0xe3bd, 0xedb3, 0x9271, 0xbda7, 0xd1fb, 0x18da, 0x13ed, 0x0c78,
    0x7660, 0x77d3, 0xa689, 0x516f, 0xa9b1, 0x6ba9, 0xecfb, 0x1bff, 0xc455, 0x3af1, 0x078f, 0x6b64, 0x2c03, 0x95f7, 0x8cc9, 0x13bb,
    0x619f, 0x8d5f, 0x9e86, 0x6b2a, 0x3fd6, 0xa9fc, 0xe174, 0xa52d, 0x677a, 0x5a7a, 0x4ee9, 0x8037, 0x1ae6, 0x5e40, 0x4de4, 0xfa15,
    0xeb29, 0xf505, 0x8ea9, 0xac17, 0x24a6, 0xc499, 0x7235, 0xa0d0, 0x20f8, 0xb91c, 0x34a3, 0xbee8, 0xa697, 0xaab4, 0x1c26, 0xd689,
    0xda57, 0x069f, 0xa187, 0x1feb, 0x901d, 0xdeca, 0xdb65, 0xd887, 0x0949, 0x6307, 0x14b4, 0x17af, 0x1259, 0x3b9d, 0xa8d3, 0x5d89,
    0xa523, 0x9bd3, 0x45d5, 0x085c, 0xaf78, 0xeb84, 0x70db, 0x2487, 0xec47, 0xe461, 0xfec0, 0x0cfa, 0xb961, 0x4217, 0xef41, 0x8705,
    0xeaa5, 0x5efd, 0x6a71, 0xd84d, 0xf482, 0xaf68, 0xef38, 0x68c7, 0xf3ce, 0x15fc, 0xb0fd, 0x975f, 0xd02c, 0xbb75, 0xd4f9, 0xfd31,
    0x33aa, 0xded0, 0xd6a2, 0x5ad9, 0xe833, 0xa27e, 0xff77, 0xca05, 0xca1e, 0x66ae, 0x0799, 0x4483, 0xfe90, 0x5090, 0x01a6, 0x864e,
    0x4db5, 0x8aae, 0x934f, 0x0f09, 0x1990, 0xdff4, 0xc70b, 0x7dcf, 0x28cc, 0xf0cb, 0xe62a, 0xef21, 0xdba9, 0x0146, 0x5841, 0xf301,
    0x2f50, 0xc2d9, 0x3f4d, 0x46b6, 0x1d32, 0x67a9, 0xbfb0, 0xc304, 0xb406, 0x3268, 0x6b58, 0xac7e, 0xafd1, 0x8c1f, 0x4ef5, 0x580c,
    0xc4d8, 0xc012, 0x07e8, 0x7aff, 0x51b2, 0x559f, 0xe53f, 0x2c45, 0xdbf7, 0xa358, 0x33fd, 0xe143, 0x7404, 0xeddd, 0x51d9, 0xbc6c,
    0x209c, 0x1d36, 0x416f, 0x885e, 0x27c9, 0x851d, 0xaf15, 0xb3d4, 0xe73f, 0x36c0, 0x02f5, 0x903b, 0x0a4d, 0x0e4e, 0xa528, 0xa1df,
    0xffbe, 0x4032, 0xc37f, 0x9ec6, 0xbf38, 0xc6bb, 0x0db8, 0x8e88, 0x18d0, 0x24d5, 0x2fe9, 0x93de, 0xb986, 0xa7d6, 0x1cb9, 0x8297,
    0x80ee, 0xcbe4, 0x892a, 0x59ea, 0xa9bf, 0xa3ee, 0xcebb, 0xfe44, 0xfd2c, 0x3f78, 0xbff7, 0xfad2, 0x05b3, 0x3a43, 0x20bd, 0xade5
};
const uint8_t secoKey[4] = {0x7b, 0xa0, 0xcf, 0xf0};
const uint8_t xorKey[256] = {
    0x50, 0x5c, 0x4c, 0x90, 0x2c, 0x64, 0xfc, 0xfb, 0x20, 0xc6, 0x94, 0xd6, 0x7b, 0xdf, 0x77, 0x50,
    0xcd, 0x68, 0x13, 0xa8, 0x8f, 0x32, 0xd1, 0xd3, 0x8f, 0x84, 0x29, 0x6c, 0x40, 0xf4, 0x7e, 0xa8,
    0x42, 0x4f, 0x8a, 0x87, 0x9a, 0x12, 0xde, 0xb3, 0x12, 0x8c, 0x03, 0x0a, 0xfe, 0x5b, 0x16, 0xc0,
    0x45, 0x5c, 0x71, 0xdc, 0x02, 0x08, 0xe1, 0x55, 0xb3, 0x61, 0x4e, 0xe7, 0x56, 0x87, 0x39, 0x9b,
    0xc1, 0xbf, 0x50, 0xa4, 0x26, 0x9c, 0x0f, 0x4e, 0xaf, 0x9e, 0x44, 0x3c, 0xba, 0x0a, 0x2c, 0x73,
    0xaa, 0x4c, 0xb4, 0x90, 0x04, 0x9c, 0x9e, 0xe4, 0xdd, 0xc6, 0x0b, 0xcf, 0x97, 0x40, 0xa8, 0xc4,
    0x9d, 0x2b, 0x1f, 0x2a, 0x2c, 0xda, 0xa4, 0x2d, 0xae, 0xdf, 0x1c, 0xf0, 0x0c, 0x58, 0xd6, 0x76,
    0x81, 0xa0, 0x5a, 0xa6, 0x4d, 0xc6, 0xe2, 0x1b, 0x60, 0x0b, 0x67, 0xb5, 0xeb, 0x62, 0x06, 0xb5,
    0x73, 0xa9, 0x9e, 0x7b, 0x3d, 0x0b, 0x5a, 0xc2, 0x56, 0x85, 0xb0, 0x6b, 0xbf, 0xf2, 0x8f, 0x7f,
    0x98, 0xe0, 0x6d, 0x28, 0x87, 0x5f, 0xa3, 0x48, 0x14, 0x7d, 0x2e, 0x60, 0x2d, 0x56, 0xa3, 0x1c,
    0xe3, 0xfd, 0x25, 0xfc, 0xb3, 0xd3, 0x49, 0xea, 0x1d, 0x0d, 0x4d, 0xc5, 0x8e, 0x48, 0xfd, 0xb8,
    0x6d, 0xfb, 0x1c, 0xdf, 0x60, 0xe3, 0xf0, 0x1a, 0x2d, 0xdf, 0x69, 0x7e, 0x67, 0x68, 0x64, 0x14,
    0x45, 0x09, 0x5f, 0xf3, 0x3a, 0x3b, 0x9d, 0xfa, 0x55, 0x86, 0x40, 0x6a, 0xd2, 0x85, 0x49, 0xf8,
    0xa1, 0xf3, 0xe5, 0x00, 0x2a, 0xb9, 0xe1, 0x36, 0x5d, 0xd4, 0x16, 0xaa, 0x45, 0x2c, 0x56, 0x75,
    0xbe, 0xd9, 0xaf, 0x3b, 0xc5, 0x0b, 0x6f, 0xb0, 0x1c, 0xd1, 0xea, 0x21, 0xdb, 0x4f, 0x9d, 0x2b,
    0x4a, 0x83, 0xfa, 0x93, 0xb7, 0x19, 0x0b, 0x7e, 0xf6, 0xdc, 0xce, 0xe8, 0x3a, 0x75, 0xef, 0x44
};

static uint8_t *enc_256(const char *str, uint64_t _n)
{
    uint8_t *res = (uint8_t *)calloc(_n * 4, 1);
    uint8_t index, xorindex;
    uint64_t x, y;
    char tmp[5];

    for(x = y = index = xorindex = 0; x < _n; ++x, y += 4, xorindex += 4, ++index) {
        sprintf(tmp, "%04X", XOR(str[x], mainKey[index]));
        res[y]   = XOR_TOP(tmp[0], secoKey[0], xorKey[xorindex]);
        res[y+1] = XOR_TOP(tmp[1], secoKey[1], xorKey[xorindex+1]);
        res[y+2] = XOR_TOP(tmp[2], secoKey[2], xorKey[xorindex+2]);
        res[y+3] = XOR_TOP(tmp[3], secoKey[3], xorKey[xorindex+3]);
    }
    
    return res;
}

static uint8_t *dec_256(const uint8_t *str, uint64_t _n)
{
    uint64_t len = _n / 4, x, y;
    uint8_t index, xorindex;
    uint8_t *res = (uint8_t *)calloc(len, 1);
    
    
    return NULL;
}

static char *slwr(const char *str)
{
    uint32_t x, len = strlen(str);
    char *res = (char *)calloc(len, 8);
    for(x = 0; x < len; ++x) {res[x] = str[x]; if (str[x] >= 0x41 && str[x] <= 0x5A) {res[x] += 0x20;}}
    return res;
}

static int to_int(int c)
{
    if (c >= 'a' && c <= 'f')
        return c - 'a' + 10;
    else if (c >= '0' && c <= '9')
        return c - '0';
    return -1;
}

static uint8_t *stoh(const uint8_t *s, uint64_t _n)
{
    uint32_t x, y;
    char tmp[3];
    uint8_t *str = (uint8_t *)calloc(_n * 2, 8);
    for(x = 0, y = 0; x < _n; ++x, y += 2) {
        sprintf(tmp, "%02x", s[x]);
        str[y] = tmp[0];
        str[y+1] = tmp[1];
    }
    return str;
}

static uint8_t *htos(const char *str)
{
    const char *hex_ascii = slwr(str);
    const uint32_t len = strlen(hex_ascii);
    if (len % 2 != 0) {return NULL;}
    long long i, j, x, top, bot;
    uint8_t *ch = (uint8_t *)calloc(len / 2, 8);
    for (i = j = x = 0; i < len; i += 2, x++) {
        top = to_int(hex_ascii[i]);
        bot = to_int(hex_ascii[i+1]);
        if (top == -1 || bot == -1) {
            printf("Non Hex!\n");
            return NULL;
        }
        ch[x] = (top << 4) + bot;
    }
    return ch;
}




