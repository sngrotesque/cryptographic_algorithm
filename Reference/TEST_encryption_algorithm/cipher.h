#include "base_include.h"

typedef struct {
    uint8_t *p;
    uint64_t p_len;
    uint8_t *c;
    uint64_t c_len;
    uint8_t *base64;
    uint64_t b64_len;
    uint8_t move_n;
} sn_cipher;

#define XOR(x, y)        x ^ y
#define XOR_TOP(x, y)    XOR((x * 14), y)   // 明文的第一次加密, k为0-255之间的密钥
#define XOR_BOT(x, y, z) XOR(x, y) - z      // 明文的第二次加密, z为用户自定义的值, 即move_n

const uint32_t main_key[256] = {
    0x6B1D, 0xA051, 0x3E98, 0x3BD5, 0x375A, 0x9D06, 0xC8CC, 0x7864, 0x9DD9, 0x4D5F, 0x8CF3, 0x1749, 0x6534, 0xA105, 0x8BE3, 0x96F8,
    0xAE06, 0xA749, 0xBAEF, 0xBDBA, 0xF7DF, 0x16FB, 0x6BA2, 0x8929, 0x79C2, 0x9E01, 0xC2D1, 0xC2BD, 0x92BD, 0xDCC4, 0x2EB8, 0x5E4B,
    0x4816, 0x25A2, 0xA4D5, 0xA6D8, 0x2CED, 0xB936, 0x139C, 0x3F6E, 0x8A17, 0xF3D8, 0x6B0E, 0x6BE3, 0x8665, 0x9F5C, 0xB9AD, 0x3FE5,
    0xB0D6, 0xE0ED, 0x1A59, 0x2C77, 0xBFD0, 0x354A, 0xF03A, 0x8BF2, 0x236B, 0x5B51, 0x11EF, 0x4E06, 0x86C2, 0xBC09, 0x7045, 0xE1EF,
    0x70AD, 0x7E20, 0x179D, 0xFE6E, 0x7DE8, 0xA429, 0xC483, 0xB46E, 0xBFC8, 0xF4A6, 0x4004, 0xC36D, 0x73D9, 0xD99D, 0x3FFE, 0x1105,
    0xEA63, 0xC688, 0x131E, 0xE348, 0x3997, 0xC6BD, 0xC8D3, 0xDA16, 0x9B8B, 0x8CB8, 0x925C, 0xFC43, 0x65A2, 0x8DD1, 0x4184, 0x56F5,
    0xA0CA, 0x494C, 0x871B, 0x1C50, 0xB8CC, 0x41AA, 0xA20F, 0x72B1, 0xFB3E, 0x63D9, 0x80DB, 0x7E97, 0xF55C, 0xB009, 0x2BB0, 0x2459,
    0x9AC9, 0xCA21, 0x11CD, 0x4F09, 0x6061, 0x65D7, 0xA36E, 0x290B, 0x599E, 0x371E, 0x36F9, 0xE04D, 0x9348, 0x9A18, 0xE43E, 0xCED3,
    0xAD1C, 0x3ABB, 0xE8F5, 0x9050, 0x4052, 0x5EED, 0xFD3E, 0xDD76, 0x302E, 0x9E1F, 0x48F7, 0x4F2C, 0x77B9, 0x16C0, 0xCAC1, 0x826D,
    0xD75A, 0x312D, 0xD912, 0x2C1B, 0xF1BB, 0xCC76, 0xB731, 0xA0F8, 0x2551, 0xC740, 0xCEAE, 0xDB96, 0x704C, 0x40E2, 0x25A0, 0x3E88,
    0xF5BD, 0x32E3, 0xC8EC, 0xA97D, 0xDA96, 0xA415, 0x11E6, 0x173E, 0xAB62, 0x2CE2, 0x21B6, 0x4CF6, 0xB78A, 0x2B43, 0x6ACF, 0x5966,
    0x7604, 0xF34C, 0x965B, 0x6274, 0xBC4B, 0x4CDB, 0xD041, 0x42DE, 0xE7EB, 0xE3C7, 0xC8A0, 0xF8E5, 0x8EF7, 0x1901, 0xA04F, 0x64C0,
    0x1FDC, 0xFA70, 0x2103, 0x33E7, 0xD6DF, 0x9170, 0xC438, 0x5191, 0x9446, 0x8451, 0xEBFD, 0xFA7D, 0xEFEB, 0xCD2C, 0xCCC7, 0x1D35,
    0x439F, 0xED92, 0x6391, 0x86FC, 0x7638, 0xA262, 0x826D, 0xFEFC, 0x1D3E, 0x9A52, 0xC1E2, 0x3390, 0x4BDC, 0xE318, 0xBE2A, 0x58AB,
    0x37C6, 0x8502, 0xE203, 0xBEC5, 0xFEE4, 0xDC3B, 0x8016, 0x9371, 0x3EDF, 0xB534, 0xCE7E, 0xEE0A, 0x196F, 0x26CF, 0xDEC2, 0x7049,
    0x1EEB, 0xC157, 0xEC70, 0x2E50, 0xF1E5, 0x6381, 0x9879, 0xC9BD, 0x26C9, 0x6747, 0xA6D9, 0x7219, 0xA6E7, 0x2E91, 0xE3F3, 0x8B20
};
const uint32_t secu_key[256] = {
    0xD14, 0x447, 0xCBE, 0x53C, 0xB8A, 0x685, 0xECD, 0xB22, 0xE8A, 0x55B, 0xD67, 0x338, 0x122, 0x685, 0x315, 0x92E,
    0x3B9, 0x245, 0x6B6, 0x259, 0xCD0, 0xC63, 0xF11, 0x8AF, 0xEC8, 0x8C2, 0xF74, 0x746, 0x7F6, 0x1CD, 0x1F9, 0x937,
    0x9DE, 0x3F5, 0xCF9, 0xBFE, 0x46F, 0x207, 0xF9E, 0xB92, 0x521, 0x597, 0x7BA, 0x61B, 0x4FE, 0xEF5, 0x9BF, 0x6C7,
    0x5A3, 0xE63, 0x958, 0xCC2, 0x7C3, 0xBE3, 0x51B, 0x424, 0xE74, 0x609, 0x25E, 0x45A, 0xF07, 0x148, 0xB40, 0x55E,
    0xA8F, 0xBBB, 0x8B4, 0x4AC, 0x885, 0x20D, 0xD17, 0x6F7, 0x5C7, 0x1E8, 0x4AB, 0xE2B, 0x382, 0xCAC, 0x18F, 0xE22,
    0x97B, 0x21F, 0x89F, 0x965, 0xD34, 0x869, 0x532, 0xB98, 0x21D, 0xB5F, 0x99B, 0x535, 0x5B2, 0x606, 0xB8D, 0x691,
    0x3EB, 0xF04, 0x59C, 0x594, 0x2F9, 0x6A7, 0xD7D, 0x1D2, 0xC47, 0x131, 0xE96, 0x5A7, 0x167, 0xC8A, 0xAF7, 0xA3B,
    0xD76, 0x8BC, 0xCD5, 0x6BC, 0x6CB, 0x23C, 0xFDD, 0xC20, 0xDCC, 0x21E, 0x14F, 0x66C, 0xC16, 0xC26, 0x1DA, 0xEF6,
    0x4FF, 0x2F2, 0x7DB, 0x60A, 0x308, 0x831, 0xBFA, 0x655, 0x39A, 0x4CD, 0x4FE, 0xEAA, 0xE78, 0xB77, 0x9E6, 0xBCB,
    0xC6C, 0xA80, 0x994, 0x6D6, 0x3CF, 0x247, 0xAA9, 0xFE1, 0x4FE, 0x1B1, 0xD15, 0xED6, 0xFE8, 0x8D7, 0x53E, 0x86A,
    0xE21, 0x6C8, 0xE64, 0xF38, 0xEA3, 0x97B, 0x573, 0x349, 0x368, 0x3BA, 0xB75, 0xB53, 0xB4C, 0x5F9, 0xC17, 0x3C7,
    0xF5E, 0x5F5, 0x362, 0x62B, 0xE5D, 0x5AA, 0x39E, 0x968, 0xDC6, 0x33F, 0x100, 0x2DA, 0x790, 0xF78, 0x4ED, 0x518,
    0x798, 0xB1C, 0x742, 0xB89, 0xC10, 0xA2E, 0xA27, 0x1D5, 0x962, 0x16B, 0x663, 0x772, 0xAA4, 0x90B, 0x88D, 0xC77,
    0x584, 0xE70, 0xD3B, 0x9BE, 0x4E1, 0xD99, 0x4B8, 0x439, 0xD27, 0xE49, 0xE93, 0x98F, 0x358, 0x3CA, 0x94B, 0x843,
    0x288, 0xADB, 0x240, 0x91E, 0x60F, 0x194, 0xAF2, 0x4DE, 0xBBF, 0x4DE, 0x7E2, 0x9DE, 0xAA6, 0x76D, 0xEA3, 0xCE0,
    0x8C6, 0xDFA, 0x472, 0xA07, 0xB13, 0xA5C, 0x995, 0xF0D, 0x7CB, 0x608, 0x2DE, 0x3FE, 0x1C9, 0xFBF, 0x39B, 0x8CD
};
const uint8_t xor_key[256] = {
    0x83, 0x85, 0x37, 0x6F, 0xAD, 0x5D, 0xBC, 0xED, 0x91, 0x72, 0x1A, 0x89, 0x96, 0xB7, 0x65, 0x51,
    0x64, 0xCD, 0xF4, 0x25, 0xC7, 0xF6, 0x3F, 0xDE, 0x09, 0xD9, 0xAA, 0x4A, 0x30, 0x4D, 0x58, 0x17,
    0x7D, 0x87, 0xD8, 0x77, 0xC4, 0xEE, 0x2D, 0x23, 0x3C, 0x3A, 0xB4, 0x53, 0x4F, 0xAB, 0x3B, 0xBA,
    0x2A, 0xDD, 0x9E, 0x56, 0xE6, 0xEC, 0x22, 0x6A, 0x82, 0x0C, 0x76, 0x73, 0x24, 0xFC, 0x79, 0xE2,
    0xC5, 0x1B, 0xC2, 0xCC, 0xA1, 0x55, 0xDF, 0x06, 0x8B, 0xA0, 0x7E, 0x67, 0x38, 0x81, 0x21, 0x62,
    0xD3, 0x5F, 0x10, 0xFA, 0x59, 0xAF, 0xA8, 0x60, 0x93, 0x26, 0xFD, 0x42, 0xBE, 0x74, 0x05, 0x2F,
    0x08, 0x8C, 0x0D, 0xC8, 0xFB, 0xAC, 0xB9, 0x78, 0x68, 0x92, 0xCF, 0xF0, 0xE5, 0xDA, 0xE3, 0x88,
    0x2B, 0x6D, 0x04, 0x3D, 0x02, 0x48, 0x7F, 0xEF, 0xE4, 0x69, 0xDB, 0x31, 0x34, 0xA4, 0x7B, 0xDC,
    0x71, 0xF9, 0xD0, 0x1C, 0x57, 0x54, 0xAE, 0xBD, 0x5A, 0x44, 0xCE, 0x40, 0x35, 0x7A, 0x1E, 0xB0,
    0x98, 0x50, 0x97, 0x19, 0xBB, 0x00, 0xE8, 0xEB, 0x36, 0x33, 0x0B, 0xD5, 0xF7, 0x5B, 0x8E, 0x94,
    0x8A, 0x5C, 0x70, 0x2C, 0x18, 0x28, 0x90, 0x12, 0x03, 0x5E, 0x4E, 0xEA, 0x1D, 0x6C, 0xE1, 0x84,
    0xF5, 0xA2, 0x0A, 0xC0, 0x4B, 0xD2, 0x43, 0xA9, 0xF2, 0x47, 0x9B, 0x61, 0xCB, 0x14, 0x75, 0x46,
    0x1F, 0x49, 0xE9, 0xF8, 0xA3, 0x8D, 0xB1, 0xB6, 0xF1, 0xA6, 0x13, 0x9F, 0x9D, 0xE0, 0x4C, 0x3E,
    0x01, 0x20, 0xC9, 0xE7, 0x86, 0x7C, 0xB3, 0x0F, 0xA5, 0xC6, 0x2E, 0xF3, 0x45, 0x41, 0xB5, 0x80,
    0xD6, 0x99, 0x66, 0x16, 0x63, 0x9C, 0xC1, 0x52, 0x8F, 0xFE, 0xB2, 0x29, 0x11, 0xC3, 0xD4, 0xD7,
    0xD1, 0x39, 0x6E, 0x0E, 0x07, 0xBF, 0x32, 0x95, 0x27, 0x6B, 0x15, 0xCA, 0xFF, 0xB8, 0xA7, 0x9A
};
const uint8_t char_key[4] = {0x6D, 0x7A, 0x47, 0xB6};

static int sn_encrypt(sn_cipher *data)
{
    data->c_len = data->p_len * 4;
    data->c = (uint8_t *)calloc(data->c_len, 1);
    if (data->c == NULL) {return -1;}

    char tmp_c[5];
    uint8_t keyindex;
    uint64_t x, y, z, tmp_n;

    for(x = y = keyindex = 0; x < data->p_len; ++x, y+=4, ++keyindex) {
        tmp_n = XOR_TOP(data->p[x], xor_key[keyindex]) ^ secu_key[keyindex];
        tmp_n = XOR_BOT(tmp_n,      main_key[keyindex],  data->move_n);
        sprintf(tmp_c, "%04X", (uint32_t)tmp_n);
        data->c[y]   = XOR(tmp_c[0], char_key[0]), data->c[y+1] = XOR(tmp_c[1], char_key[1]);
        data->c[y+2] = XOR(tmp_c[2], char_key[2]), data->c[y+3] = XOR(tmp_c[3], char_key[3]);
    }
    data->p = (uint8_t *)malloc(0);
    data->base64 = b64en(data->c, data->c_len);
    data->b64_len = strlen((char *)data->base64);
    return 0;
}

static int sn_decrypt(sn_cipher *data)
{
    data->p_len = data->c_len / 4;
    data->p = (uint8_t *)calloc(data->p_len, 1);
    if (data->p == NULL) {return -1;}



    return 0;
}


