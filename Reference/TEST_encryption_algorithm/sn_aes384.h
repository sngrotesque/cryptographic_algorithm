/*
* 大概纲要：
* 1. 填充后的长度为3的倍数
* 2. 密钥和初始向量必须大于等于0x00且小于等于0xFF
* 3. 必须有三个用户自定义的值，即：自向量
*/

#include "base_include.h"
#include "random.h"

#define XOR(x, y) ((x & 0xff) ^ y)

typedef struct {
    uint8_t *pData;
    uint8_t *cData;
    uint32_t pData_n;
    uint32_t cData_n;
} sn_aes;

const uint8_t aes384_iv[69] = {
    0xED, 0x81, 0xAC, 0x7D, 0xC0, 0xA7, 0xFB, 0x55, 0x06,
    0x02, 0x20, 0xF3, 0xDA, 0x7F, 0xA1, 0xB1, 0xB1, 0x1E,
    0x74, 0xC7, 0xA7, 0x52, 0x77, 0xCB, 0xD7, 0x84, 0xDB,
    0xCB, 0x32, 0xBC, 0x99, 0x6F, 0x3A, 0xA4, 0x1D, 0xE5,
    0x2B, 0x13, 0x12, 0x9F, 0x6A, 0xB2, 0xD6, 0xAF, 0x12,
    0xBD, 0x0D, 0xDF, 0x60, 0xF6, 0xDC, 0xF2, 0x16, 0xAA,
    0xC2, 0xEF, 0xF6, 0x21, 0xB7, 0xC0, 0xFE, 0xE4, 0xB4,
    0xC1, 0x41, 0x0E, 0x1C, 0x80, 0x06
};

const uint8_t aes384_key[69] = {
    0x9F, 0xC4, 0xA5, 0xD5, 0x02, 0x25, 0x1A, 0xE6, 0x60, 
    0x85, 0xD2, 0x60, 0x2E, 0x8F, 0x40, 0x47, 0x1C, 0x0D, 
    0x92, 0x6E, 0xE0, 0x8A, 0x35, 0x36, 0xBF, 0x37, 0x87, 
    0xD5, 0xC4, 0xC6, 0x9E, 0xEA, 0xBB, 0xEE, 0x39, 0x58, 
    0x30, 0x0C, 0x29, 0xFD, 0x4E, 0x59, 0x98, 0x76, 0x83, 
    0xC6, 0x76, 0x86, 0x56, 0x65, 0xE4, 0x95, 0xFF, 0x44, 
    0x88, 0xD9, 0x7C, 0x7B, 0x64, 0x86, 0x53, 0x17, 0xBF, 
    0xE6, 0x90, 0x04, 0xC3, 0xD7, 0x62
};

static uint32_t aes384_FILL(uint32_t _n)
{
    if (_n == 0) {return 0;}
    uint32_t mod = _n % 69;
    if (mod == 0) {
        return _n;
    } else {
        if (_n <= 69) {
            return 69;
        } else {
            return _n + 69 - mod;
        }
    }
    return 0;
}

