#ifndef __MBS256_H__
#define __MBS256_H__ 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

#define MBS256_BlockSize 32
#define MBS256_Rounds 11

#define MBS256_E(m, k, iv) (((m ^ k) - (0xff ^ k)) ^ iv)
#define MBS256_D(c, k, iv) (c ^ k)

#define MBS256_SUB(k, k13, kb, kb17, m) \
    (((((k ^ kb) - (k13 - kb17)) & 0xff) - ((m << 2) ^ ((m << 4) / 3))) ^ 0xff)

typedef struct {
    uint8_t *data;
    uint8_t *key;
    uint8_t keySet[MBS256_Rounds][MBS256_BlockSize];
} mbs256_ctx;

static uint8_t MBS256_IV[MBS256_Rounds][MBS256_BlockSize] = {
    {0xf3, 0xb5, 0x5f, 0xb2, 0x4c, 0x75, 0x8a, 0xb4,
    0xc7, 0xe4, 0x6d, 0x53, 0xad, 0x09, 0xe4, 0x45,
    0x1e, 0x98, 0x5c, 0xbe, 0x35, 0x3c, 0x44, 0x0b,
    0x85, 0x2d, 0x5f, 0xe9, 0xf7, 0xcb, 0xde, 0xc5},

    {0x53, 0x3f, 0x74, 0x6c, 0x81, 0xd7, 0x4a, 0xa0,
    0x48, 0xa9, 0xd0, 0x53, 0x93, 0x0f, 0x56, 0x5a,
    0x3f, 0xb5, 0xd2, 0x44, 0x1e, 0x04, 0x28, 0x44,
    0x7b, 0x3d, 0xc1, 0x08, 0x3f, 0x45, 0x77, 0xe7},

    {0x9c, 0x7f, 0x54, 0xcd, 0x0a, 0x6e, 0x10, 0x6a,
    0x14, 0x23, 0xb4, 0xd6, 0x23, 0x13, 0xb1, 0xc6,
    0x24, 0x1b, 0x78, 0x56, 0xde, 0x67, 0x5d, 0x2a,
    0x1f, 0x64, 0xea, 0x0e, 0x6a, 0x20, 0xa0, 0xad},

    {0xc6, 0x12, 0xa8, 0x53, 0x18, 0x78, 0xba, 0x81,
    0xfa, 0xef, 0x95, 0xe9, 0x14, 0x79, 0x44, 0xc1,
    0x87, 0xc0, 0x35, 0x1f, 0xf1, 0x52, 0x8a, 0xc4,
    0x6e, 0xbe, 0x92, 0xab, 0xdf, 0x9b, 0x04, 0xa3},

    {0x78, 0xba, 0xb5, 0x30, 0x6b, 0x86, 0xaa, 0x80,
    0x19, 0x34, 0xbf, 0xb2, 0x0d, 0x78, 0x0d, 0x8d,
    0x8a, 0x23, 0xac, 0x8a, 0xe3, 0x60, 0xd8, 0x7f,
    0xb7, 0xe4, 0x97, 0xc9, 0x65, 0x09, 0x00, 0x13},

    {0xa3, 0x86, 0x59, 0x70, 0x26, 0x34, 0x32, 0x4f,
    0xe5, 0xe7, 0x7c, 0x6b, 0xbf, 0x76, 0xa2, 0xba,
    0x45, 0xf9, 0x8a, 0x50, 0xc5, 0xed, 0xe8, 0x88,
    0xd1, 0x01, 0xe4, 0x8c, 0x76, 0x19, 0xd8, 0xb5},

    {0x08, 0xcd, 0xd9, 0x56, 0xe0, 0xf0, 0x64, 0xcc,
    0x6c, 0x52, 0x9a, 0xde, 0x2e, 0xf0, 0x2a, 0x0f,
    0xb2, 0x83, 0x1d, 0xfc, 0x8c, 0xf6, 0x0c, 0xd0,
    0xb3, 0x06, 0x6c, 0x4b, 0x21, 0x69, 0x92, 0x64},

    {0xc7, 0x28, 0x06, 0x6d, 0x06, 0x0a, 0xa8, 0xb3,
    0x25, 0x84, 0x99, 0xd9, 0x1a, 0x62, 0xec, 0x6d,
    0x6a, 0xfb, 0x8e, 0x5e, 0x06, 0xfa, 0xdd, 0xba,
    0xf9, 0x05, 0x79, 0xf4, 0x70, 0xf0, 0xdd, 0x08},

    {0xcf, 0x9a, 0x34, 0xf8, 0x4f, 0x21, 0x4e, 0x71,
    0x99, 0x7f, 0x5d, 0x98, 0x6c, 0x03, 0x3f, 0xb0,
    0x7d, 0xb8, 0xf4, 0x72, 0x14, 0x52, 0x17, 0xb9,
    0x04, 0x89, 0x8b, 0x0d, 0x57, 0x73, 0x7a, 0xa7},

    {0x25, 0x69, 0x36, 0x89, 0x91, 0x9a, 0xf0, 0x9c,
    0xc2, 0xe5, 0x32, 0x54, 0x03, 0x56, 0x91, 0xc3,
    0x6c, 0x79, 0x35, 0xe5, 0x42, 0x46, 0xed, 0x8d,
    0x08, 0x3a, 0xa6, 0x63, 0x63, 0x35, 0x0a, 0x53},

    {0xc0, 0x43, 0xd7, 0x81, 0x05, 0xf2, 0x01, 0xf4,
    0x3f, 0xc1, 0xa5, 0x43, 0x6a, 0xd3, 0xe7, 0x52,
    0xed, 0x0a, 0xbf, 0x29, 0xb5, 0xa7, 0x24, 0x48,
    0x52, 0x21, 0x52, 0xb1, 0xf2, 0x64, 0xaa, 0x8c}
};

static uint8_t MBS256_SUBKEY_BOX[MBS256_BlockSize] = {
    0xd2, 0x39, 0x56, 0x23, 0xc1, 0xb7, 0xe4, 0xbd,
    0xc5, 0x92, 0x04, 0x4a, 0x32, 0xb0, 0x56, 0x62,
    0x1c, 0xe0, 0x9a, 0x3b, 0xdc, 0x47, 0xf4, 0x05,
    0x99, 0x47, 0xbc, 0x85, 0x4e, 0xd6, 0xaa, 0x4b
};

static void mbs256_subKey(mbs256_ctx *ctx)
{
    uint8_t round, index;
    for(round = 0; round < MBS256_Rounds; ++round) {
        memcpy(ctx->keySet[round], ctx->key, MBS256_BlockSize);
        for(index = 0; index < MBS256_BlockSize; ++index) {
            ctx->key[index] = MBS256_SUB(
                ctx->key[index],
                ctx->key[(index + 13) % MBS256_BlockSize],
                MBS256_SUBKEY_BOX[index],
                MBS256_SUBKEY_BOX[(index + 17) % MBS256_BlockSize],
                ((index + round) ^ 0xff)
            );
        }
    }
}

static void mbs256_rowShift(mbs256_ctx *ctx)
{
    
}

static void mbs256_encrypt(mbs256_ctx *ctx)
{
    uint8_t round, index;
    for(round = 0; round < MBS256_Rounds; ++round) {
        for(index = 0; index < MBS256_BlockSize; ++index) {
            ctx->data[index] = MBS256_E(
                ctx->data[index],
                ctx->keySet[round][index],
                MBS256_IV[round][index]
            );
        }
    }
}
#endif





